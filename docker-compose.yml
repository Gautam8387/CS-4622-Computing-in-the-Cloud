# ./docker-compose.yml
# Removed obsolete 'version' tag

services:
  # --- Infrastructure Services ---
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379" # Keep exposed for potential debugging tools
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio: # S3 Compatible Object Storage
    image: minio/minio:latest
    ports:
      - "9000:9000"  # S3 API Port
      - "9001:9001"  # MinIO Console Port <-- ADDED Console Port
    environment:
      # Correct ENV VARS for MinIO server itself
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    # Correct command to enable console
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck: # <-- ADDED Healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped # <-- ADDED Restart Policy

  mailhog: # Email Catching Service
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025" # Local SMTP server port
      - "8025:8025" # MailHog Web UI port
    networks:
      - app-network
    restart: unless-stopped # <-- ADDED Restart Policy

  # --- Application Services ---
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - "5000:5000" # UI access from host browser
    env_file:
      - .env
    volumes: # <-- ADDED Volumes for local development code changes
      - ./client:/app
    depends_on:
      api-gateway: # Client UI calls API Gateway JS
        condition: service_healthy
      auth-service: # Client backend calls Auth Service during callback
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    ports:
      - "5001:5001" # API access from client browser JS
    env_file:
      - .env
    volumes: # <-- ADDED Volumes for local development code changes
      - ./services/api-gateway:/app
      - ./services/common:/app/common # Needs access to common
    depends_on:
      redis: # Uses Redis for Celery tasks & metadata
        condition: service_healthy
      upload-service: # Calls upload service directly
        condition: service_started
      # auth-service dependency less critical at runtime, but okay for startup order
      auth-service:
        condition: service_started
    networks:
      - app-network
    healthcheck: # Keep healthcheck
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    # ports: # <-- REMOVED: No need to expose port to host
    #  - "5002:5002"
    env_file:
      - .env
    volumes: # <-- ADDED Volumes for local development code changes
      - ./services/auth-service:/app
    depends_on:
      redis: # Good practice for startup order, even if not directly used now
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  upload-service:
    build:
      context: .
      dockerfile: services/upload-service/Dockerfile
    # ports: # <-- REMOVED: No need to expose port to host
    #  - "5003:5003"
    env_file:
      - .env
    volumes: # <-- ADDED Volumes for local development code changes
      - ./services/upload-service:/app
      - ./services/common:/app/common # Needs access to common
    depends_on:
      minio: # Directly needs MinIO
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  notification-worker: # Renamed from notification-service for clarity
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    env_file:
      - .env
    volumes: # <-- ADDED Volumes for local development code changes
      - ./services/notification-service:/app
      - ./services/common:/app/common # Needs access to common
    depends_on: # Refined dependencies
      redis:
        condition: service_healthy
      mailhog: # Needs SMTP target
        condition: service_started # Mailhog starts fast
      minio: # Needs MinIO for presigned URLs via common
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  transcoding-worker: # Renamed from transcoding-service for clarity
    build:
      context: .
      dockerfile: services/transcoding-service/Dockerfile
    env_file:
      - .env
    volumes: # <-- ADDED Volumes for local development code changes
      - ./services/transcoding-service:/app
      - ./services/common:/app/common # Needs access to common
    depends_on: # Refined dependencies
      redis:
        condition: service_healthy
      minio: # Needs MinIO for download/upload
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  redis-data:
  minio-data:

networks:
  app-network:
    driver: bridge